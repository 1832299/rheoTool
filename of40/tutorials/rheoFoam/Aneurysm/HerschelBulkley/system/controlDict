/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     rheoFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         1.01;

deltaT          0.00001;

writeControl    adjustableRunTime;

writeInterval   0.25;

purgeWrite      0;

writeFormat     ascii;

writePrecision  12;

writeCompression compressed;

timeFormat      general;

timePrecision   10;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep on;

maxCo          50;

maxDeltaT      0.1;

functions
{

    probes
    {
        // Where to load it from
        functionObjectLibs ( "libsampling.so" );

        type            probes;

        // Name of the directory for probe data
        name            probes;

        // Write at same frequency as fields
        writeControl   timeStep;
        writeInterval  10;

        // Fields to be probed
        fields
        (
            U
            p
        );

        probeLocations
        (
             (0.00188 0.04432 -0.01182)                      
        );
   }

   calcWSS
    {
	 functionObjectLibs ("libutilityFunctionObjects.so");
	 type coded;
	 redirectType WSSmag;
	 writeControl outputTime;
         writeInterval      1;
         enabled             yes;

	 codeWrite
	 #{
 
          // Lookup/create variable 
	     
	   const volVectorField& U = mesh().lookupObject<volVectorField>("U");
	 
           const volScalarField& eta_ = mesh().lookupObject<volScalarField>("eta");
           
          // Compute WSSmag
 
           volTensorField L = fvc::grad(U);
           volTensorField tauNewt = eta_ * ( L + L.T() ) ;

           volScalarField WSSmag
           (
             IOobject
             (
                "WSSmag",
                U.time().timeName(),
                mesh(),
                IOobject::NO_READ,
                IOobject::AUTO_WRITE
             ),
             mesh(),
             dimensionedScalar
             (
                "zero",
                dimensionSet( 1, -1, -2, 0, 0, 0, 0),
                0.
             )
           );
         
           forAll(WSSmag.boundaryFieldRef(), patchI)
	    {
		WSSmag.boundaryFieldRef()[patchI] =
                mag(
			 (
			    mesh().Sf().boundaryField()[patchI]
			   /mesh().magSf().boundaryField()[patchI]
			 ) & tauNewt.boundaryField()[patchI]
                   );
	    }
          
           
            WSSmag.write();

	 #};
    }

}

// ************************************************************************* //
